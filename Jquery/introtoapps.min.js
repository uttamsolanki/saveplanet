(function() {
    var d, R = [].indexOf || function(d) {
        for (var q = 0, x = this.length; q < x; q++)
            if (q in this && this[q] === d) return q;
        return -1
    };
    window.isArray = Array.isArray || function(d) {
        return "[object Array]" === {}.toString.call(d)
    };
    window.isFunction = function(d) {
        return "function" === typeof d
    };
    window.isObject = function(d) {
        return "object" === typeof d && null !== d
    };
    window.isString = function(d) {
        return "string" === typeof d && null !== d
    };
    window.isNumber = function(d) {
        return "number" === typeof d && null !== d
    };
    String.prototype.contains = function(d) {
        return -1 !==
            this.indexOf(d)
    };
    Array.prototype.contains = function(d) {
        var q;
        for (q = this.length; q--;)
            if (this[q] === d) return !0;
        return !1
    };
    Array.prototype.removeIndex = function(d) {
        return this.splice(d, 1)
    };
    window.random = function(d, q) {
        return null != q ? Math.round(Math.random() * (q - d)) + d : Math.round(Math.random() * d)
    };
    window[d] = d = {
        movingObjects: {},
        gravityObjects: {},
        lastUpdate: 0,
        gravity: 1,
        nextID: 1,
        animate: !1,
        init: function() {
            var w, q, x, D, E, A, y, F, s, z, G, H, I, J, K, L, B, M, N, O, P, C, u, t, Q, k;
            window.requestAnimFrame = function() {
                return window.requestAnimationFrame ||
                    window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(b, a) {
                        return window.setTimeout(b, 16)
                    }
            }();
            z = function(b, a) {
                var c, f, d, g, n, p, h, r, v, m;
                v = b.z;
                m = a.z;
                if (v !== m) return !1;
                n = b.x;
                h = b.y;
                d = b.w;
                c = h + b.h;
                p = a.x;
                r = a.y;
                g = a.w;
                f = r + a.h;
                return v !== m || c < r || h > f || n + d < p || n > p + g ? !1 : !0
            };
            s = function(b) {
                var a;
                a = b.data("iid");
                null == a && (a = d.nextID++, b.data("iid", a));
                return null != d.movingObjects[a] ? d.movingObjects[a] : {
                    id: a,
                    obj: b,
                    init: !1,
                    speed: 1,
                    moveTo: null,
                    autoRemoveOffScreen: !0,
                    angle: null,
                    vY: 0,
                    collisions: []
                }
            };
            F = function(b) {
                var a;
                a = b.data("iid");
                null == a && (a = d.nextID++, b.data("iid", a));
                return null != d.gravityObjects[a] ? d.gravityObjects[a] : {
                    id: a,
                    obj: b,
                    gravity: 1
                }
            };
            q = function() {
                var b, a, c, f, l, g, n, p, h, r, v, m, e;
                if (d.animate) {
                    if ((new Date).getTime() > d.lastUpdate + 16) {
                        l = $(window).width();
                        m = $(window).height();
                        f = d.movingObjects;
                        for (p in f) {
                            e = f[p];
                            g = e.obj.position();
                            if (null == e.x || null == e.y || 0 === e.x || 0 === e.y) e.x = g.left, e.y = g.top;
                            null == e.z && (e.z = e.obj.css("z-index"));
                            e.w = e.obj.outerWidth(!0);
                            e.h = e.obj.outerHeight(!0)
                        }
                        g = d.movingObjects;
                        for (p in g)
                            if (e = g[p], !e.init)
                                for (c in e.init = !0, n = d.movingObjects, n) f = n[c], c !== p && ((null != e.onCollision || null != f.onCollision || e.autoBounceBack || f.autoBounceBack || e.autoBounceOff || f.autoBounceOff) && !f.collisions.contains(e.id) && !e.collisions.contains(f.id) && z(e, f)) && (e.collisions.push(f.id), f.collisions.push(e.id));
                        f = d.movingObjects;
                        for (p in f) {
                            e = f[p];
                            e.moveToNow = e.moveTo;
                            h = !1;
                            n = null != e.speed ? e.speed / 100 * (l + m) : 0;
                            if ("number" === typeof e.moveToNow) {
                                for (; 360 <
                                    e.moveToNow;) e.moveToNow -= 360;
                                for (; - 360 > e.moveToNow;) e.moveToNow += 360;
                                b = e.angle = e.moveToNow * (Math.PI / 180);
                                e.x += Math.cos(b - Math.PI / 2) * n;
                                e.y += Math.sin(b - Math.PI / 2) * n;
                                e.obj.originalCssFunction("left", e.x + "px").originalCssFunction("top", e.y + "px");
                                d.movingObjects[p] = e;
                                h = !0
                            } else if (Array.isArray(e.moveToNow)) {
                                h = e.x;
                                r = e.y;
                                b = e.moveToNow[0] - e.x;
                                a = e.y - e.moveToNow[1];
                                b = e.angle = Math.atan2(b, a);
                                h !== e.moveToNow[0] && (e.x += Math.cos(b - Math.PI / 2) * n);
                                r !== e.moveToNow[1] && (e.y += Math.sin(b - Math.PI / 2) * n);
                                if (h <= e.moveToNow[0] &&
                                    e.x >= e.moveToNow[0] || h >= e.moveToNow[0] && e.x <= e.moveToNow[0]) e.x = e.moveToNow[0];
                                if (r <= e.moveToNow[1] && e.y >= e.moveToNow[1] || r >= e.moveToNow[1] && e.y <= e.moveToNow[1]) e.y = e.moveToNow[1];
                                e.obj.originalCssFunction("left", e.x + "px").originalCssFunction("top", e.y + "px");
                                if (e.x === e.moveToNow[0] && e.y === e.moveToNow[1]) {
                                    if (e.onMoveTo) try {
                                        e.onMoveTo()
                                    } finally {
                                        e.onMoveTo = null
                                    }
                                    e.angle = null
                                }
                                d.movingObjects[p] = e;
                                h = !0
                            } else if (null != e.moveToNow && ("string" === typeof e.moveToNow || "object" === typeof e.moveToNow && "function" ===
                                    typeof e.moveToNow.position) && (g = "string" === typeof e.moveToNow ? $(e.moveToNow) : e.moveToNow, g = g.position(), null != g)) {
                                h = e.x;
                                r = e.y;
                                b = g.left - e.x;
                                a = e.y - g.top;
                                b = e.angle = Math.atan2(b, a);
                                h !== g.left && (e.x += Math.cos(b - Math.PI / 2) * n);
                                r !== g.top && (e.y += Math.sin(b - Math.PI / 2) * n);
                                if (h <= g.left && e.x >= g.left || h >= g.left && e.x <= g.left) e.x = g.left;
                                if (r <= g.top && e.y >= g.top || r >= g.top && e.y <= g.top) e.y = g.top;
                                e.obj.originalCssFunction("left", e.x + "px").originalCssFunction("top", e.y + "px");
                                if (e.x === g.left && e.y === g.top && e.onMoveTo) try {
                                    e.onMoveTo()
                                } finally {
                                    e.onMoveTo =
                                        null
                                }
                                d.movingObjects[p] = e;
                                h = !0
                            }
                            null != e.weight && (g = e.obj.closest(".scene"), g = 0 < g.length && null != g.data("iid") ? gravityObjects[null != g.data("iid")] : null, g = null != g && null != g.gravity && "number" === typeof g.gravity ? g.gravity : d.gravity, null == e.vy && (e.vy = 0), e.vy += g, e.y += e.vy, e.obj.originalCssFunction("top", e.y + "px"), d.movingObjects[p] = e, h = !0);
                            if (h && (e.autoRemoveOffScreen || null != e.onOffScreen) && (0 > e.x + e.w || 0 > e.y + e.h || e.x > l || e.y > m)) {
                                e.autoRemoveOffScreen && (e.obj.originalRemoveFunction(), delete d.movingObjects[p]);
                                try {
                                    null != (v = e.onOffScreen) && v.apply(e.obj)
                                } catch (k) {}
                            }
                        }
                        v = d.movingObjects;
                        for (p in v)
                            for (c in e = v[p], m = d.movingObjects, m)
                                if (f = m[c], c !== p) {
                                    if ((null != e.onCollision || null != f.onCollision || e.autoBounceBack || f.autoBounceBack || e.autoBounceOff || f.autoBounceOff) && !f.collisions.contains(e.id) && !e.collisions.contains(f.id) && z(e, f)) {
                                        e.collisions.push(f.id);
                                        f.collisions.push(e.id);
                                        if (null != e.onCollision) try {
                                            e.obj.onCollision = e.onCollision, e.obj.onCollision(f.obj)
                                        } catch (s) {
                                            l = s, console.log(l)
                                        }
                                        if (null != f.onCollision) try {
                                            f.obj.onCollision =
                                                f.onCollision, f.obj.onCollision(e.obj)
                                        } catch (t) {}
                                        jQuery.contains(document, e.obj[0]) && jQuery.contains(document, f.obj[0]) && (e.autoBounceBack ? e.obj.bounceBack(f.obj) : e.autoBounceOff && e.obj.bounceOff(f.obj), f.autoBounceBack ? f.obj.bounceBack(e.obj) : f.autoBounceOff && f.obj.bounceOff(e.obj))
                                    }
                                    l = n = 0;
                                    for (h = e.collisions.length; 0 <= h ? n < h : n > h; l = 0 <= h ? ++n : --n) g = e.collisions[l], f = d.movingObjects[g], d.movingObjects.hasOwnProperty(g) && jQuery.contains(document, f.obj[0]) && z(e, f) || e.collisions.removeIndex(l)
                                }
                        d.lastUpdate =
                            (new Date).getTime()
                    }
                    return requestAnimFrame(q)
                }
            };
            t = function() {
                if (!d.animate) return d.animate = !0, u(), requestAnimFrame(q)
            };
            u = function() {
                var b, a, c, f, l;
                if (d.animate) {
                    b = document.getElementsByTagName("body")[0];
                    b = b.getElementsByTagName("*");
                    l = d.movingObjects;
                    for (f in l) c = l[f], jQuery.contains(document, c.obj[0]) || delete d.movingObjects[c.id];
                    l = [];
                    f = 0;
                    for (c = b.length; f < c; f++) a = b[f], a = $(a), null == a.data("iid") ? (a = s(a), l.push(d.movingObjects[a.id] = a)) : l.push(void 0);
                    return l
                }
            };
            window.globalHeight = function() {
                return $(window).height()
            };
            window.ajaxCallToServer = function(b) {
                try {
                    return $.ajax({
                        url: b.url,
                        type: b.type,
                        data: b.data,
                        dataType: b.dataType,
                        async: !0,
                        success: b.successHandler,
                        error: function(a, f, d) {
                            a.responseJSON ? b.failureHandler(a.responseJSON) : error("Error calling webservice : " + d);
                            return $.mobile.loading("hide")
                        }
                    })
                } catch (a) {
                    return error(a)
                }
            };
            window.get = function(b, a, c, f) {
                var d;
                try {
                    return d = "start", (window.location.href.startsWith("http://localhost") || window.location.href.startsWith("localhost") || window.location.href.startsWith("file://")) &&
                        0 > b.indexOf("://") || b.startsWith("http://localhost") || b.startsWith("localhost"), d = "ready", d = "pre ajax", $.ajax({
                            type: "GET",
                            url: b,
                            timeout: 2E4,
                            crossDomain: !0,
                            success: function(c, g, n) {
                                var d;
                                try {
                                    if (d = new Date(n.getResponseHeader("Last-Modified")), "function" === typeof a) return a(c, d)
                                } catch (l) {
                                    if ("undefined" === typeof f || !0 === f) return errorLogOnly("get(" + b + ").followup", l.message)
                                }
                            },
                            error: function(a, g, f) {
                                if (!("string" === typeof f && 0 < f.length && 0 <= f.indexOf("Bad Gateway")) && (errorLogOnly("URL (" + b + "): " + g + " / " +
                                        f), "function" === typeof c)) return c("[" + g + "]: " + f)
                            }
                        }), d = "post ajax"
                } catch (g) {
                    try {
                        if ("undefined" === typeof f || !0 === f) return errorLogOnly("get", ui("errornocloud") + " () " + g.message + " (State: " + d + ")")
                    } catch (n) {}
                }
            };
            k = {};
            A = y = void 0;
            Q = function(b, a, c, f) {
                var d, g;
                d = Math.abs(b - a);
                g = Math.abs(c - f);
                return d >= g ? 0 < b - a ? "Left" : "Right" : 0 < c - f ? "Up" : "Down"
            };
            E = function(b) {
                y = Date.now();
                A = y - (k.last || y);
                k.el = $(parentIfText(b.touches[0].target));
                k.x1 = b.touches[0].pageX;
                k.y1 = b.touches[0].pageY;
                0 < A && 250 >= A && (k.isDoubleTap = !0);
                return k.last = y
            };
            D = function(b) {
                k.x2 = b.touches[0].pageX;
                return k.y2 = b.touches[0].pageY
            };
            x = function(b) {
                if (k.isDoubleTap) return k = {}, "doubleTap";
                if (k.x2 && 30 < Math.abs(k.x1 - k.x2) || k.y2 && 30 < Math.abs(k.y1 - k.y2)) return k = {}, "swipe" + Q(k.x1, k.x2, k.y1, k.y2);
                if ("last" in k) return k = {}, "tap";
                k = {};
                return ""
            };
            w = (G = !!(0 <= R.call(window, "ontouchstart"))) ? "touchend" : "click";
            H = jQuery.fn.add;
            J = jQuery.fn.append;
            K = jQuery.fn.appendTo;
            N = jQuery.fn.html;
            O = jQuery.fn.prepend;
            P = jQuery.fn.prependTo;
            C = jQuery.fn.remove;
            M = jQuery.fn.empty;
            L = jQuery.fn.before;
            I = jQuery.fn.after;
            B = jQuery.fn.css;
            (function(b) {
                b.fn.add = function() {
                    var a;
                    a = H.apply(this, arguments);
                    u();
                    return a
                };
                b.fn.append = function() {
                    var a;
                    a = J.apply(this, arguments);
                    u();
                    return a
                };
                b.fn.appendTo = function() {
                    var a;
                    a = K.apply(this, arguments);
                    u();
                    return a
                };
                b.fn.html = function() {
                    var a;
                    a = N.apply(this, arguments);
                    u();
                    return a
                };
                b.fn.prepend = function() {
                    var a;
                    a = O.apply(this, arguments);
                    u();
                    return a
                };
                b.fn.prependTo = function() {
                    var a;
                    a = P.apply(this, arguments);
                    u();
                    return a
                };
                b.fn.empty = function() {
                    var a;
                    a = M.apply(this, arguments);
                    u();
                    return a
                };
                b.fn.before = function() {
                    var a;
                    a = L.apply(this, arguments);
                    u();
                    return a
                };
                b.fn.after = function() {
                    var a;
                    a = I.apply(this, arguments);
                    u();
                    return a
                };
                b.fn.remove = function() {
                    var a;
                    a = C.apply(this, arguments);
                    u();
                    return a
                };
                b.fn.originalRemoveFunction = C;
                b.fn.css = function(a, c) {
                    "top" !== a && "bottom" !== a && "left" !== a && "right" !== a || this.each(function() {
                        var a;
                        a = s(b(this));
                        delete a.x;
                        delete a.y;
                        return d.movingObjects[a.id] = a
                    });
                    "z-index" === a && this.each(function() {
                        var a;
                        a = s(b(this));
                        delete a.z;
                        return d.movingObjects[a.id] = a
                    });
                    return B.apply(this, arguments)
                };
                b.fn.originalCssFunction = B;
                b.fn.isCollision = function(a) {
                    var c;
                    "string" === typeof a && (a = b(a));
                    c = s(this);
                    a = s(a);
                    return z(c, a)
                };
                b.fn.onCollision = function(a) {
                    d.animate || t();
                    return this.each(function() {
                        var c;
                        c = b(this);
                        c = s(c);
                        c.onCollision = a;
                        return d.movingObjects[c.id] = c
                    })
                };
                b.fn.speed = function(a) {
                    d.animate || t();
                    return this.each(function() {
                        var c;
                        c = b(this);
                        c = s(c);
                        c.speed = a;
                        return d.movingObjects[c.id] = c
                    })
                };
                b.fn.moveTo = function(a, c) {
                    d.animate ||
                        t();
                    return this.each(function() {
                        var f;
                        f = b(this);
                        f = s(f);
                        f.moveTo = null != c ? [a, c] : a;
                        return d.movingObjects[f.id] = f
                    })
                };
                b.fn.autoBounceBack = function(a) {
                    d.animate || t();
                    return this.each(function() {
                        var c;
                        c = s(b(this));
                        c.autoBounceBack = null != a ? a : !0;
                        return d.movingObjects[c.id] = c
                    })
                };
                b.fn.autoBounceOff = function(a) {
                    d.animate || t();
                    return this.each(function() {
                        var c;
                        c = s(b(this));
                        c.autoBounceOff = null != a ? a : !0;
                        return d.movingObjects[c.id] = c
                    })
                };
                b.fn.bounceBack = function(a) {
                    d.animate || t();
                    return this.each(function() {
                        var a,
                            f;
                        f = s(b(this));
                        null != f.angle && (a = f.angle > Math.PI ? f.angle - Math.PI : f.angle + Math.PI, f.moveTo = a * (180 / Math.PI));
                        return d.movingObjects[f.id] = f
                    })
                };
                b.fn.bounceOff = function(a) {
                    var c, f, l, g, n, p;
                    d.animate || t();
                    f = b(a);
                    n = f.offset().left;
                    p = f.offset().top;
                    l = f.outerHeight(!0);
                    f = f.outerWidth(!0);
                    c = p + l;
                    g = n + f;
                    return this.each(function() {
                        var f, r, l, m, e, k, q;
                        e = s(b(this));
                        if (null == e.moveTo && null != a) {
                            if (k = s(b(a)), null != k.angle) return e.moveTo = k.angle * (180 / Math.PI)
                        } else if (null != e.angle) return l = e.obj, k = l.offset().left, r =
                            l.offset().top, m = l.outerHeight(!0), l = l.outerWidth(!0), f = r + m, q = k + l, m = e.angle * (180 / Math.PI), 0 > m && (m += 360), 0 === m || 90 === m || 180 === m || 270 === m || 360 === m ? m -= 180 : (l = Math.abs(f < p ? p - f : r - c), r = Math.abs(r > c ? r - c : p - f), f = Math.abs(q < n ? n - q : k - g), k = Math.abs(k > g ? k - g : n - q), console.log("Edges: top: " + l + ", bottom: " + r + ", left: " + f + ", right: " + k + ", "), Math.min(f, k) < Math.min(l, r) ? (console.log("Vertical wall"), k = 0) : (console.log("Horizontal wall"), k = 90), m = (2 * k - m) * (Math.PI / 180), k = 1 * Math.cos(m), m = 1 * Math.sin(m), m = 180 * Math.atan2(m,
                                k) / Math.PI), e.moveTo = m, d.movingObjects[e.id] = e
                    })
                };
                b.fn.onMoveComplete = function(a) {
                    d.animate || t();
                    return this.each(function() {
                        var c;
                        c = b(this);
                        c = s(c);
                        c.onMoveTo = a;
                        return d.movingObjects[c.id] = c
                    })
                };
                b.fn.autoRemoveOffScreen = function(a) {
                    d.animate || t();
                    return this.each(function() {
                        var c;
                        c = s(b(this));
                        c.autoRemoveOffScreen = null != a ? a : !0;
                        return d.movingObjects[c.id] = c
                    })
                };
                b.fn.onOffScreen = function(a) {
                    d.animate || t();
                    return this.each(function() {
                        var c;
                        c = b(this);
                        c = s(c);
                        c.onOffScreen = a;
                        return d.movingObjects[c.id] =
                            c
                    })
                };
                b.fn.displayScene = function() {
                    if (!d.animate) return t()
                };
                b.fn.weight = function(a) {
                    d.animate || t();
                    return this.each(function() {
                        var c;
                        c = b(this);
                        c = s(c);
                        return null != a ? (c.weight = a, d.movingObjects[c.id] = c, this) : null != (null != c ? c.weight : void 0)
                    })
                };
                b.fn.gravity = function(a) {
                    d.animate || t();
                    return 0 === this.length ? d.gravity = a : this.each(function() {
                        var c;
                        c = b(this);
                        c = F(c);
                        c.gravity = a;
                        return d.gravityObjects[c.id] = c
                    })
                };
                b.fn.rotate = function(a) {
                    d.animate || t();
                    return this.each(function() {
                        return b(this).css({
                            "-webkit-transform": "rotate(" +
                                a(NaN, {
                                    "-moz-transform": "rotate(" + a(NaN, {
                                        "-ms-transform": "rotate(" + a(NaN, {
                                            transform: "rotate(" + a(NaN)
                                        })
                                    })
                                })
                        })
                    })
                };
                b.fn.onTap = function(a, b) {
                    this.uiData().onTapFunction = a;
                    if (G) this.on("touchstart", function(a) {
                        isAndroid && a.preventDefault();
                        E(window.event);
                        if ("function" === typeof b) return b(a)
                    }), this.on("touchmove", function(a) {
                        return D(window.event)
                    }), this.on("touchend", function(b) {
                        window.event.preventDefault();
                        window.event.stopPropagation();
                        if ("function" === typeof functionCall && !("tap" !== x(window.event) ||
                                has(child.data("ui")) && has(child.data("ui").disabled))) return a(b)
                    });
                    else this.on(w, function(b) {
                        b.preventDefault();
                        b.stopPropagation();
                        return a(b, this)
                    });
                    return this
                };
                b.fn.onChange = function(a) {
                    "function" !== typeof a && error(this + ".onChange(action)", "Action not a function (" + typeof a + ")");
                    return this.each(function() {
                        b(this).uiData().onchange = a;
                        return b(this).on("change", function(c) {
                            return a(b(c.target).value())
                        })
                    })
                };
                b.fn.addChildren = function() {
                    var a, b;
                    try {
                        if (null == arguments || 0 === arguments.length) return this;
                        b = 1 !== arguments.length || null == arguments[0] || "undefined" === typeof arguments[0] || arguments[0] instanceof jQuery || !arguments[0].length ? arguments : arguments[0];
                        for (a = 0; a < b.length;) this.addChild(b[a]), a++;
                        return this
                    } catch (f) {
                        throw a = f, Error("addChildren() -> " + a.message);
                    }
                };
                b.fn.prependChild = function(a) {
                    return b.fn.addChild(a, !0)
                };
                b.fn.addChild = function(a, b) {
                    var f, d;
                    try {
                        if (null == a) return this;
                        if ("undefined" === typeof a || null == a) throw Error("Undefined UI child... have you called a function, instead of providing the function name? (good: displayMain, bad: displayMain()), or called a create() function that doesn't return a htmlcode() object?");
                        if (!isArray(a) || a instanceof jQuery || "select" === this.domType())
                            if ("function" === typeof a) this.onTap(a);
                            else {
                                d = this.uiData();
                                d.children || (d.children = []);
                                d.children.push(a);
                                if ("object" === typeof d.elementMap) {
                                    f = "object" === typeof a && "function" === typeof a.domType ? a.domType().toLowerCase() : typeof a;
                                    if ("function" === typeof d.elementMap[f]) return d.elementMap[f](this, a), this;
                                    if ("function" === typeof d.elementMap.other) return d.elementMap.other(this, a), this;
                                    if ("function" === typeof d.elementMap.object) return d.elementMap.object(this,
                                        a), this
                                }
                                "object" === typeof a ? b ? this.prepend(a) : this.append(a) : ("string" !== typeof a && (a = "" + a), d.text = d.text || [], d.text.push(a), this.append(uieval(a)))
                            } else 0 < a.length && this.addChildren(a);
                        return this
                    } catch (g) {
                        throw Error("addChild(" + a + ") -> " + g.message);
                    }
                };
                b.fn.refresh = function() {
                    var a, c;
                    try {
                        a = this.children();
                        for (c = 0; c < a.length;) b(a[c]).refresh(), c++;
                        "object" === typeof this.uiData() && "function" === typeof this.uiData().refresh && this.uiData().refresh()
                    } catch (f) {
                        error(".refresh()", f.message)
                    }
                    return this
                };
                b.fn.clear = function() {
                    return this.html("")
                };
                b.fn.child = function(a) {
                    var b;
                    b = this.children().eq(a);
                    if (0 === b.length) throw Error("$.child(" + a + ") -> invalid index");
                    return b
                };
                b.fn.isType = function(a) {
                    return this.domType() === a.toUpperCase()
                };
                b.fn.domType = function() {
                    var a;
                    try {
                        return a = this.uiData(), "object" === typeof a && "string" === typeof a.domType ? a.domType.toUpperCase() : this[0].tagName.toUpperCase()
                    } catch (b) {
                        error("domType()", b.message)
                    }
                    return ""
                };
                b.fn.uiData = function(a, b) {
                    var f, d;
                    try {
                        d = 1;
                        if ("object" !== typeof this.uiObject) {
                            d =
                                2;
                            f = this.data("ui");
                            d = 3;
                            if ("object" !== typeof f && (f = {}, "object" !== typeof f && error("$.uiData()", "d not set"), this.data("ui", f), d = 4, "object" !== typeof this.data("ui"))) throw Error("this.data(ui) didn't save (jq length: " + this.length + " type:" + (0 < this.length ? this[0].tagName.toUpperCase() : "no jquery element") + " , " + this.data() + "). No jquery DOM element in your query?");
                            "object" !== typeof this.uiObject && (this.uiObject = f)
                        }
                        d = 5;
                        "object" !== typeof this.uiObject && error("$.uiData()", "this.uiObject is undefined");
                        d = 6;
                        if ("undefined" === typeof a) return this.uiObject;
                        if ("undefined" !== typeof b) return this.data("ui")[a] = b, this
                    } catch (g) {
                        throw Error("$.uiData(" + d + ") -> " + g.message);
                    }
                };
                b.fn.dataRole = function(a) {
                    this.attr("data-role", a);
                    return this
                };
                b.fn.dataInline = function(a) {
                    this.attr("data-inline", a);
                    return this
                };
                b.fn.dataPosition = function(a) {
                    this.attr("data-position", a);
                    return this
                };
                b.fn.dataDisplay = function(a) {
                    this.attr("data-display", a);
                    return this
                };
                b.fn.dataType = function(a) {
                    this.attr("data-type", a);
                    return this
                };
                b.fn.href = function(a) {
                    this.attr("href", a);
                    return this
                };
                b.fn.src = function(a) {
                    this.attr("src", a);
                    return this
                };
                b.fn.datavalue = function(a) {
                    if (0 === arguments.length) return this.uiData().datavalue;
                    this.uiData().datavalue = a;
                    return this
                };
                b.fn.id = function(a) {
                    if (0 === arguments.length) return this.attr("id");
                    this.attr("id", a);
                    return this
                };
                b.fn.valid = function(a) {
                    var b, f;
                    try {
                        "undefined" !== typeof a && this.isType("TEXTBOX") && (b = this, f = div().attr("classname", "warning minibox-hidden"), this.addChild(f), this.children("input").on("input",
                            function(g) {
                                g = a(b, g);
                                if ("undefined" !== typeof g && null != g) return f.html(g), f.css("display", "block")
                            }))
                    } catch (d) {
                        throw Error("$.valid(validationFunction) -> " + d.message);
                    }
                    return this
                };
                b.fn.inputtext = function(a) {
                    try {
                        if ("textbox" === this.uiData().type) return "undefined" !== typeof a ? (this.children("input").val(a), this) : this.children("input").val()
                    } catch (b) {
                        throw Error("$.text() -> " + b.message);
                    }
                    return null
                };
                b.fn.checked = function(a) {
                    try {
                        if ("checkbox" === this.uiData().type) return "undefined" !== typeof a ? (a ? this.children("input").attr("checked",
                            "checked") : this.children("input").removeAttr("checked"), this) : this.children("input")[0].checked
                    } catch (b) {
                        throw Error("$.checked() -> " + b.message);
                    }
                    return null
                };
                b.fn.label = function() {
                    this.addChild(label.apply(this, arguments));
                    return this
                };
                b.fn.name = function(a) {
                    this.attr("name", a);
                    return this
                };
                b.fn.value = function(a) {
                    try {
                        return null != this.uiData().value ? this.uiData().value(a) : "undefined" === typeof a ? this.val() : this.val(a)
                    } catch (b) {
                        return error("$.fn.value(" + a + "): are you using event instead of event.target?",
                            b)
                    }
                };
                b.fn.hasAttr = function(a) {
                    return void 0 !== this.attr(a)
                };
                b.valHooks.textarea = {
                    get: function(a) {
                        return a.value.replace(/\r?\n/g, "\r\n")
                    }
                };
                b.fn.fixedHeader = function() {
                    this.attr("data-id", "header");
                    return this
                };
                b.fn.fixedFooter = function() {
                    this.attr("data-id", "footer");
                    return this
                };
                b.fn.setDefault = function(a) {
                    return this.toggle(a, !1)
                };
                b.fn.disable = function() {
                    var a;
                    try {
                        a = this.uiData();
                        a.disabled = !0;
                        if ("function" === typeof a.disable) return a.disable();
                        if (this.isType("A")) return this.addClass("disabled")
                    } catch (b) {
                        throw Error("$.disable() -> " +
                            b.message);
                    }
                };
                b.fn.enable = function() {
                    var a;
                    try {
                        a = this.uiData();
                        a.disabled = !1;
                        if ("function" === typeof a.enable) return a.enable();
                        if (this.isType("A")) return this.removeClass("disabled")
                    } catch (b) {
                        throw Error("$.enable() -> " + b.message);
                    }
                };
                b.fn.toggle = function(a, b) {
                    var f, d;
                    null == b && (b = !0);
                    if ("select" === this.uiData().type) isString(a) ? this.val(a) : this.attr("selectedIndex", a);
                    else if ("buttongroup" === this.uiData().type)
                        for (f = 0; f < this.uiData().children.length;) f === a ? (this.uiData().selected = f, this.uiData().children[f].attr("disabled", !0)) : this.uiData().children[f].removeAttr("disabled"), f++;
                    if (!0 === b && isFunction(this.uiData().onchange)) try {
                        d = a, isObject(this.uiData().children[a]) && isFunction(this.uiData().children[a].value) ? d = this.uiData().children[a].value() : isNumber(a) && (d = this.uiData().children[a]), this.uiData().onchange(d)
                    } catch (g) {
                        alert(g.message)
                    }
                    return this
                };
                b.fn.addChildClass = function(a) {
                    var b;
                    try {
                        for (b = 0; b < this.children().length;) this.child(b).addClass(a), b++;
                        return this
                    } catch (f) {
                        throw Error("addChildClass(" + a + ") -> " +
                            f.message);
                    }
                };
                b.fn.isAttached = function() {
                    return 0 < this.closest("body").length
                };
                b.fn.moveClassesFrom = function(a) {
                    var b, f, d, g;
                    f = a[0].className.split(" ");
                    for (d = 0; d < f.length;) {
                        b = !0;
                        for (g = 1; g < arguments.length;) arguments[g] === f[d] && (b = !1), g++;
                        b && (this.addClass(f[d]), a.removeClass(f[d]));
                        d++
                    }
                    return this
                };
                b.fn.draw = function(a, c) {
                    try {
                        if ("string" === typeof a && this.html() === a) return;
                        "object" === typeof this.data("ui") && "function" === typeof this.data("ui").draw ? this.data("ui").draw(a) : "object" !== typeof a ? this.empty().html(a) :
                            this.empty().append(a);
                        !b.mobile || ("boolean" === typeof c && !0 !== c || "function" !== typeof this.enhanceWithin) || this.enhanceWithin()
                    } catch (f) {
                        throw Error("$.draw(" + a + ") -> " + f.message);
                    }
                    return this
                };
                return b.fn.popup = function(a) {
                    try {
                        return 0 === b("#popupbehind").length && (b("body").append("<div id='popupbehind' class='hide'/>"), b("#popupbehind").onTap(function() {
                            return b(".popup").popup("close")
                        })), this.each(function() {
                            var f;
                            f = b(this);
                            if ("open" === a) return b("#popupbehind").removeClass("hide"), f.addClass("popup").removeClass("hide");
                            if ("close" === a) return b("#popupbehind").addClass("hide"), f.removeClass("popup").addClass("hide")
                        })
                    } catch (c) {
                        throw Error("$.popup(" + a + ") -> " + c);
                    }
                }
            })(jQuery);
            return function(b) {
                var a, c, f, d;
                a = null;
                d = 1000001;
                c = function(a, b, f) {
                    var d;
                    d = $(document.createElement(a));
                    d.uiData().node = d;
                    d.uiData().type = a;
                    "object" === typeof f && (d.uiData().elementMap = f);
                    null != b && ("object" === typeof b && b.length) && d.addChildren(b);
                    return d
                };
                f = function(a, b, d, f) {
                    var c;
                    c = $(document.createElement(b));
                    c.uiData().domType = a;
                    c.uiData().type =
                        b;
                    c.uiData().node = c;
                    "object" === typeof f && (c.uiData().elementMap = f);
                    null != d && ("object" === typeof d && d.length) && c.addChildren(d);
                    return c
                };
                b.body = function() {
                    null == a && (a = $("body"));
                    0 < arguments.length && a.addChildren(arguments);
                    return a
                };
                b.tag = function() {
                    var a;
                    a = argumentsToArray(arguments);
                    a.splice(0, 1);
                    return c(arguments[0], a)
                };
                b.h1 = function() {
                    return "function" === typeof("undefined" !== typeof Theme && null !== Theme ? Theme.h1 : void 0) ? Theme.h1(argumentsToArray(arguments)) : c("h1", arguments)
                };
                b.h2 = function() {
                    return c("h2",
                        arguments)
                };
                b.h3 = function() {
                    return c("h3", arguments)
                };
                b.h4 = function() {
                    return c("h4", arguments)
                };
                b.h5 = function() {
                    return c("h5", arguments)
                };
                b.h6 = function() {
                    return c("h6", arguments)
                };
                b.div = function() {
                    return c("div", arguments)
                };
                b.span = function() {
                    return c("span", arguments)
                };
                b.p = function() {
                    return c("p", arguments)
                };
                b.button = function() {
                    return c("button", arguments).addClass("button")
                };
                b.a = function() {
                    return c("a", arguments)
                };
                b.italics = function() {
                    return c("i", arguments)
                };
                b.ul = function() {
                    return c("ul", arguments, {
                        other: "li"
                    })
                };
                b.ol = function() {
                    return c("ol", arguments, {
                        other: "li"
                    })
                };
                b.li = function() {
                    return c("li", arguments)
                };
                b.hr = function() {
                    return c("hr", arguments)
                };
                b.left = function() {
                    return c("div", arguments).addClass("floatleft")
                };
                b.right = function() {
                    return c("div", arguments).addClass("floatright")
                };
                b.clear = function() {
                    return c("div", arguments).addClass("clear")
                };
                b.form = function(a) {
                    var b;
                    b = argumentsToArray(arguments);
                    1 <= b.length && "string" === typeof b[0] ? b.shift() : a = "form" + d++;
                    return c("form", b).id(a).submit(function() {
                        return !1
                    })
                };
                b.img = b.image = function() {
                    return c("img", arguments, {
                        string: function(a, b) {
                            try {
                                return a.attr("src", b), null
                            } catch (d) {
                                throw Error("ruby.string(" + a + " , " + b + ") -> " + d.message);
                            }
                        }
                    })
                };
                b.rb = function() {
                    return c("rb", arguments)
                };
                b.rt = function() {
                    return c("rt", arguments)
                };
                b.ruby = function() {
                    return c("ruby", arguments, {
                        string: function(a, b) {
                            var d;
                            try {
                                return d = null, d = 0 === a.children().length ? $(document.createElement("rb")).append(b) : 1 === a.children().length ? $(document.createElement("rt")).append(b) : $(b), a.append(d), d
                            } catch (c) {
                                throw Error("ruby.string(" +
                                    a + " , " + b + ") -> " + c.message);
                            }
                        }
                    })
                };
                b.table = function() {
                    var a;
                    a = c("table", arguments, {
                        tr: function(a, b) {
                            a.append(b);
                            return b
                        },
                        td: function(a, b) {
                            var d, c, f;
                            d = "number" === typeof a.uiData().rowLimit ? a.uiData().rowLimit : 0;
                            c = a[0];
                            f = 0 === c.rows.length ? c.insertRow(c.rows.length) : c.rows[c.rows.length - 1];
                            0 < d && f.cells.length >= d && (f = c.insertRow(c.rows.length));
                            $(f).append(b);
                            return b
                        },
                        th: function(a, b) {
                            var d, c, f;
                            d = "number" === typeof a.uiData().rowLimit ? a.uiData().rowLimit : 0;
                            c = a[0];
                            f = 0 === c.rows.length ? c.insertRow(c.rows.length) :
                                c.rows[c.rows.length - 1];
                            0 < d && f.cells.length >= d && (f = c.insertRow(c.rows.length));
                            $(f).append(b);
                            return b
                        },
                        other: function(a, b) {
                            var d, c, f;
                            d = "number" === typeof a.uiData().rowLimit ? a.uiData().rowLimit : 0;
                            c = a[0];
                            f = 0 === c.rows.length ? c.insertRow(c.rows.length) : c.rows[c.rows.length - 1];
                            0 < d && f.cells.length >= d && (f = c.insertRow(c.rows.length));
                            d = f.insertCell(f.cells.length);
                            c = "object" !== typeof b ? $(document.createElement("span")).append(b) : b;
                            $(d).html(c);
                            return c
                        }
                    });
                    a.rowspan = a.uiData().rowspan = function(b, c) {
                        a.find("tr").first().children("td").eq(b -
                            1).attr("rowspan", c);
                        return a
                    };
                    a.addRow = a.uiData().addRow = function() {
                        var b;
                        b = tr(argumentsToArray(arguments));
                        a.addChild(b);
                        return a
                    };
                    return a
                };
                b.tr = function() {
                    var a;
                    a = c("tr", arguments, {
                        td: function(a, b) {
                            a.append(b);
                            return b
                        },
                        other: function(a, b) {
                            var c, d;
                            c = a[0];
                            c = c.insertCell(c.cells.length);
                            d = "object" !== typeof b ? $(document.createElement("span")).append(b) : b;
                            $(c).html(d);
                            return d
                        }
                    });
                    a.rowspan = a.uiData().rowspan = function(b, c) {
                        a.children("td").eq(b - 1).attr("rowspan", c);
                        return a
                    };
                    a.colspan = a.uiData().colspan =
                        function(b) {
                            a.children("td").eq(0).attr("colspan", b);
                            return a
                        };
                    return a
                };
                b.td = function() {
                    return c("td", arguments)
                };
                b.th = function() {
                    return c("th", arguments)
                };
                b.row = function() {
                    return table().addChildren(arguments)
                };
                b.fixedrow = function(a) {
                    var b, c;
                    c = table();
                    c.uiData("rowLimit", a);
                    b = Array.prototype.slice.call(arguments, 1);
                    c.addChildren(b);
                    return c
                };
                b.buttongroup = function() {
                    var a;
                    a = f("buttongroup", "div", arguments, {
                        togglebutton: function(a, b) {
                            return error("buttongroup(togglebutton)", "Don't add togglebuttons! Just add plain buttons")
                        },
                        button: function(a, b) {
                            b.onTap(function() {
                                var c;
                                for (c = 0; c < a.uiData().children.length;) a.uiData().children[c] === b ? (a.uiData().selected = c, a.uiData().children[c].attr("disabled", !0)) : a.uiData().children[c].removeAttr("disabled"), c++;
                                try {
                                    if ("function" === typeof a.uiData().onchange) return a.uiData().onchange(a.uiData().selected, b.datavalue())
                                } catch (d) {
                                    return alert(d.message)
                                }
                            });
                            1 === a.uiData().children.length ? b.addClass("toggleleft") : 2 < a.uiData().children.length ? (a.uiData().children[a.uiData().children.length -
                                2].removeClass("toggleright"), a.uiData().children[a.uiData().children.length - 2].addClass("togglecenter")) : b.addClass("toggleright");
                            a.append(b);
                            return b
                        }
                    });
                    0 < a.children().length && (a.uiData().selected = 0, a.child(0).attr("disabled", !0));
                    a.addClass("buttongroup");
                    return a
                };
                b.togglebutton = function() {
                    var a;
                    a = f("togglebutton", "button", arguments);
                    a.addClass("togglebutton");
                    return a
                };
                b.select = function() {
                    return c("select", arguments, {
                        other: function(a, b) {
                            var c;
                            c = Array.isArray(b) && 2 === b.length ? $(document.createElement("option")).attr("value",
                                b[0]).text(b[1]) : $(document.createElement("option")).attr("value", b).text(b);
                            a.append(c);
                            return c
                        }
                    })
                };
                b.input = function() {
                    var a;
                    a = c("input", arguments);
                    a.onTap(function() {
                        return a.focus()
                    });
                    return a
                };
                b.label = function() {
                    return c("label", arguments)
                };
                b.textbox = function(a, b) {
                    var d, h;
                    h = c("input");
                    "string" === typeof b && h.attr("pattern", b);
                    h.attr("autocomplete", "off");
                    h.attr("autocapitalize", "off");
                    h.attr("autocorrect", "off");
                    h.attr("type", "text");
                    d = f("textbox", "div", h, {
                        label: function(b, c) {
                            try {
                                a = h.id();
                                if (null ==
                                    a) throw Error("textbox doesn't have an ID, cannot add label.");
                                b.prepend(c);
                                c.attr("for", a);
                                return null
                            } catch (d) {
                                throw Error("textbox().elementMap.label() -> " + d.message);
                            }
                        }
                    });
                    d.on = h.on;
                    "string" === typeof a && (h.attr("id", a), d.addChild(label(a)));
                    h.focus(function() {
                        try {
                            if (h.uiData().lastValue = h.value(), "function" === typeof d.uiData().onFocus) d.uiData().onFocus()
                        } catch (a) {
                            error("textbox.focus.function()", a.message)
                        }
                        return d
                    });
                    h.blur(function() {
                        try {
                            if ("function" === typeof d.uiData().onBlur) d.uiData().onBlur(h.value());
                            if (h.uiData().lastValue !== h.value() && "function" === typeof d.uiData().onChange) d.uiData().onChange(h.value())
                        } catch (a) {
                            error("textbox.blur.function()", a.message)
                        }
                        return d
                    });
                    d.uiData().onEnter = d.onEnter = function(a) {
                        h.on("keypress", function(b) {
                            return function(b) {
                                try {
                                    if (13 === b.keyCode) {
                                        if (isFunction(a)) return a();
                                        if (isObject(a) && isFunction(null != a ? "function" === typeof a.uiData ? a.uiData().onTapFunction : void 0 : void 0)) return a.uiData().onTapFunction()
                                    }
                                } catch (c) {
                                    return error("textbox.onEnter.keypress", c)
                                }
                            }
                        }(this));
                        return d
                    };
                    d.uiData().value = d.value = function(a) {
                        return a ? (h.value(a), d) : h.value()
                    };
                    return d
                };
                b.passwordbox = function(a) {
                    var b, d;
                    d = c("input");
                    d.attr("autocomplete", "off");
                    d.attr("autocapitalize", "off");
                    d.attr("autocorrect", "off");
                    d.attr("type", "password");
                    b = f("textbox", "div", d, {
                        label: function(b, c) {
                            try {
                                a = d.id();
                                if (null == a) throw Error("passwordbox doesn't have an ID, cannot add label.");
                                b.prepend(c);
                                c.attr("for", a);
                                return null
                            } catch (f) {
                                throw Error("passwordbox().elementMap.label() -> " + f.message);
                            }
                        }
                    });
                    "string" === typeof a && (d.attr("id", a), b.addChild(label(a)));
                    b.uiData().onEnter = b.onEnter = function(a) {
                        d.on("keypress", function(b) {
                            return function(b) {
                                try {
                                    if (13 === b.keyCode) {
                                        if (isFunction(a)) return a();
                                        if (isObject(a) && isFunction(null != a ? "function" === typeof a.uiData ? a.uiData().onTapFunction : void 0 : void 0)) return a.uiData().onTapFunction()
                                    }
                                } catch (c) {
                                    return error("passwordbox.onEnter.keypress", c)
                                }
                            }
                        }(this));
                        return b
                    };
                    b.uiData().value = b.value = function(a) {
                        return a ? (d.value(a), b) : d.value()
                    };
                    return b
                };
                b.page =
                    function() {
                        return div(Core.argumentsToArray(arguments)).dataRole("page")
                    };
                b.displayPage = function(a) {
                    a.isAttached() || a.appendTo($("body"));
                    $("div[data-role='page']").css("display", "none");
                    return a.css("display", "")
                };
                b.ui = function(a) {
                    return a
                };
                b.uiObject = function(a) {
                    return a
                };
                b.uieval = function(a) {
                    return a
                };
                return b.generateUniqueID = function(a) {
                    for (var b;;)
                        if (b = Math.floor(1E7 * Math.random()) + 1, 0 === $("#" + a + b).length) return a + b
                }
            }(window)
        }
    };
    $(document).ready(function() {
        var w;
        try {
            d.init();
            if (null != ("undefined" !==
                    typeof config && null !== config ? config.appName : void 0)) try {
                loadDB()
            } catch (q) {
                w = q, error("ready().loadDB()", w)
            }
            if (window.displayMain) return window.displayMain()
        } catch (x) {
            return w = x, error("ready()", w)
        }
    })
}).call(this);